{"name":"Wi-Fi Water Meter","type":"com.fibaro.deviceController","apiVersion":"1.2","initialProperties":{"viewLayout":{"$jason":{"body":{"header":{"style":{"height":"0"},"title":"quickApp_device_134"},"sections":{"items":[{"components":[{"name":"productLabel","style":{"weight":"1.2"},"text":"product_type","type":"label","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"modelLabel","style":{"weight":"1.2"},"text":"product_name","type":"label","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"wifiLabel","style":{"weight":"1.2"},"text":"wifi_ssid","type":"label","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"}]}},"head":{"title":"quickApp_device_134"}}},"uiCallbacks":[],"quickAppVariables":[{"name":"IPv4","type":"string","value":"none"}],"typeTemplateInitialized":true},"files":[{"name":"main","isMain":true,"isOpen":true,"content":"----------------------------------------------------------------------------------\n-- Wi-Fi P1 Water meter\n-- Version 1.0 (October 2022)\n-- Copyright (c)2022 Joep Verhaeg <info@joepverhaeg.nl>\n\n-- More information about my Quick Apps you can find at:\n-- https://docs.joepverhaeg.nl\n----------------------------------------------------------------------------------\n-- DESCRIPTION:\n-- This Quick App reads the HomeWizard Wi-Fi Water meter local API. It shows the \n-- water meter readings and calculates a daily water use value.\n\n-- QUICK SETUP:\n-- 1. Enable the LOCAL API in the HomeWizard Energy App under Settings -> Meters\n-- 2. Set the IPv4 QUICK APP VARIABLE to the IP address of the Wi-Fi Water meter\n--    you want to read.\n----------------------------------------------------------------------------------\n\nclass 'DayWater'(QuickAppChild)\nfunction DayWater:__init(device)\n    -- You should not insert code before QuickAppChild.__init.\n    QuickAppChild.__init(self, device) \nend\n\nfunction DayWater:updateValue(data)\n    self:updateProperty(\"value\", data.day_liter_m3 * 1000) -- write in l!\n    self:updateProperty(\"unit\", \"l\")\n    self:updateProperty(\"log\", data.update_timestamp)\nend\n\nclass 'TotalWater'(QuickAppChild)\nfunction TotalWater:__init(device)\n    -- You should not insert code before QuickAppChild.__init.\n    QuickAppChild.__init(self, device) \nend\n\nfunction TotalWater:updateValue(data)\n    self:updateProperty(\"value\", data.total_liter_m3) -- write in m3!\n    self:updateProperty(\"unit\", \"m3\")\n    self:updateProperty(\"log\", data.update_timestamp)\nend\n\nclass 'ActiveWater'(QuickAppChild)\nfunction ActiveWater:__init(device)\n    -- You should not insert code before QuickAppChild.__init.\n    QuickAppChild.__init(self, device) \nend\n\nfunction ActiveWater:updateValue(data)\n    self:updateProperty(\"value\", data.active_liter_lpm) -- write in lpm!\n    self:updateProperty(\"unit\", \"lpm\")\n    self:updateProperty(\"log\", data.update_timestamp)\nend\n\nlocal function getChildVariable(child, varName)\n    for _,v in ipairs(child.properties.quickAppVariables or {}) do\n        if (v.name == varName) then \n            return v.value\n        end\n    end\n    return \"\"\nend\n\nfunction QuickApp:getDeviceInfo()\n    self.http:request('http://' .. self.ipaddr .. '/api', {\n            options = {\n                headers = { Accept = \"application/json\" },\n                method = 'GET'\n            },\n            success = function(response)\n                --self:debug(response.status)\n                --self:debug(response.data)\n                local deviceinfo = json.decode(response.data)\n                self:updateView(\"productLabel\", \"text\", deviceinfo['product_type'])\n                self:updateView(\"modelLabel\", \"text\", deviceinfo['product_name'])\n                self:updateView(\"serialLabel\", \"text\", \"ID: \" .. deviceinfo['serial'])\n                self:updateView(\"firmwareLabel\", \"text\", \"Software: \" .. deviceinfo['firmware_version'])\n            end\n            ,\n            error = function(message)\n                self:debug(\"error:\", message)\n            end         \n        })\nend\n\nfunction QuickApp:updateMeterData()\n    self.http:request('http://' .. self.ipaddr .. '/api/v1/data', {\n            options = {\n                headers = { Accept = \"application/json\" },\n                method = 'GET'\n            },\n            success = function(response)\n                --self:debug(response.status)\n                --self:debug(response.data)\n                local meterdata = json.decode(response.data,{others = {null=false}})\n                local logtime   = os.date('%d-%m %H:%M:%S')\n \n                -- Write meter values to the QA variables at midnight to reset day values to zero.\n                if os.date(\"%H:%M\") == \"00:00\" then\n                    self:setVariable(\"daystart_liter_m3\", meterdata['total_liter_m3'])\n                    self:debug(\"It's midnight, reset day values to zero.\")\n                end\n\n                -- Update information in main device.\n                self:updateView(\"wifiLabel\", \"text\", \"Wi-Fi: \" .. meterdata['wifi_ssid'] .. \" (\" .. meterdata['wifi_strength'] .. \" %)\")\n                -- Update the child devices.\n                local day_liter_m3 = tonumber(self:getVariable(\"daystart_liter_m3\"))\n                devicedata.day_liter_m3 = tonumber(meterdata['total_liter_m3']) - day_liter_m3\n                devicedata.total_liter_m3 = tonumber(meterdata['total_liter_m3'])\n                devicedata.active_liter_lpm = tonumber(meterdata['active_liter_lpm'])\n                devicedata.update_timestamp = logtime\n\n                for id,child in pairs(self.childDevices) do \n                    child:updateValue(devicedata) \n                end\n            end\n            ,\n            error = function(message)\n                self:debug(\"Error:\", message)\n            end         \n    })\n\n    local timeout = 60000 - (os.date(\"%S\") * 1000)\n    fibaro.setTimeout(timeout, function() -- wait 1 minute\n            self:updateMeterData()\n        end)\n\nend\n\nfunction QuickApp:onInit()\n    self:debug(\"QuickApp: Wi-Fi Water meter initialisation\")\n    self.childsInitialized = true\n    \n    self.ipaddr = self:getVariable(\"IPv4\")\n    self.http   = net.HTTPClient({ timeout = 5000 })\n    \n    if not api.get(\"/devices/\" .. self.id).enabled then\n        self:warning(\"The Wi-Fi Water meter devices is disabled!\")\n        return\n    end\n    \n    if (self.ipaddr == \"none\") then\n        self:warning(\"Please set the IPv4 Quick App variable to the IP address of the Wi-Fi Water meter!\")\n        return\n    end\n\n    self.http:request('http://' .. self.ipaddr .. '/api/v1/data', {\n            options = {\n                headers = { Accept = \"application/json\" },\n                method = 'GET'\n            },\n            success = function(response)\n                --self:debug(response.status)\n                --self:debug(response.data)\n                local meterdata = json.decode(response.data,{others = {null=false}})\n                \n                local cdevs = api.get(\"/devices?parentId=\"..self.id) or {}\n                if #cdevs == 0 then\n                    -- Child devices are not created yet, create them...\n                    initChildData = {\n                        {name=\"Today consumption\", className=\"DayWater\", type=\"com.fibaro.multilevelSensor\"},\n                        {name=\"Total consumption\", className=\"TotalWater\", type=\"com.fibaro.multilevelSensor\"},\n                        {name=\"Active liter p/m\", className=\"ActiveWater\", type=\"com.fibaro.multilevelSensor\"}\n                    }\n\n                    for _,c in ipairs(initChildData) do\n                        local child = self:createChildDevice(\n                            {\n                                name = c.name,\n                                type=c.type,\n                                initialProperties = {},\n                                initialInterfaces = {},\n                            },\n                            _G[c.className] -- Fetch class constructor from class name\n                        )\n                        child:setVariable(\"className\", c.className)  -- Save class name so we know when we load it next time.\n                        child:updateProperty(\"manufacturer\", \"HomeWizard\")\n                        child:updateProperty(\"deviceRole\", \"WaterMeter\")\n                        child.parent = self\n                        self:debug(\"Child device \" .. child.name .. \" created with id: \", child.id)\n                    end\n\n                    -- When the child devices are created, create the QA variables to calculate the day values.\n                    self:setVariable(\"daystart_liter_m3\", meterdata['total_liter_m3'])\n                else\n                    -- Ok, we already have children, instantiate them with the correct class\n                    -- This is more or less what self:initChildDevices does but this can handle \n                    -- mapping different classes to the same type...\n                    for _,child in ipairs(cdevs) do\n                        local className = getChildVariable(child,\"className\") -- Fetch child class name\n                        local childObject = _G[className](child) -- Create child object from the constructor name\n                        self.childDevices[child.id]=childObject\n                        childObject.parent = self -- Setup parent link to device controller\n                    end\n                end\n\n                -- Create a devicedata array\n                devicedata = {}\n                devicedata.day_liter_m3 = tonumber(self:getVariable(\"daystart_liter_m3\"))\n                devicedata.total_liter_m3 = tonumber(meterdata['total_liter_m3'])\n                devicedata.active_liter_lpm = tonumber(meterdata['active_liter_lpm'])\n                devicedata.update_timestamp = \"\"\n\n                self:getDeviceInfo()\n                self:updateMeterData()\n            end\n            ,\n            error = function(message)\n                self:debug(\"Error:\", message)\n            end \n        })\nend"}]}